package cn.udesk.voice;import android.content.Context;import android.media.AudioManager;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnErrorListener;import android.media.MediaPlayer.OnPreparedListener;import android.text.TextUtils;import java.io.IOException;import cn.udesk.CommonUtil;import udesk.core.UdeskConst;import udesk.core.model.MessageInfo;import udesk.core.utils.UdeskUtils;public class RecordPlay implements RecordFilePlay, OnCompletionListener,        OnPreparedListener, OnErrorListener {    private volatile boolean isPlaying = false;    private Context mContent;    int mPosition;    String mMediaFilePath;    RecordPlayCallback mCallbak;    MediaPlayer mediaPlayer;    MessageInfo mCurrentMessage;    public RecordPlay(Context content) {        this.mContent = content;    }    @Override    public synchronized void click(MessageInfo message,                                   RecordPlayCallback callback) {        try {            if (mediaPlayer == null) {                init();            }            if (!TextUtils.isEmpty(message.getLocalPath()) && UdeskUtils.isExitFileByPath(message.getLocalPath())) {                mMediaFilePath = message.getLocalPath();            } else if (UdeskUtils.fileIsExitByUrl(mContent, UdeskConst.FileAduio, message.getMsgContent())                    && UdeskUtils.getFileSize(UdeskUtils.getFileByUrl(mContent, UdeskConst.FileAduio, message.getMsgContent())) > 0) {                mMediaFilePath = UdeskUtils.getPathByUrl(mContent, UdeskConst.FileAduio, message.getMsgContent());            } else {                mMediaFilePath = message.getMsgContent();            }            if (mCurrentMessage != message) {                // 停止旧文件的播放                if (isPlaying) {                    recycleRes();                }                // 对旧数据 进行回调                if (mCurrentMessage != null) {                    mCurrentMessage.isPlaying = false;                    if (mCallbak != null) {                        mCallbak.onPlayEnd(mCurrentMessage);                        mCurrentMessage = null;                    }                }                // 新旧数据更新                mCallbak = callback;                mCurrentMessage = message;                try {                    init();                    startPlayer(mMediaFilePath);                } catch (Exception e) {                    CommonUtil.printError(mContent, e);                }            } else {                toggle();            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    private void startPlayer(final String mediaFilePath) throws IOException {        try {            mPosition = 0;            mediaPlayer.reset();            mediaPlayer.setDataSource(mediaFilePath);            mediaPlayer.setLooping(false);            mediaPlayer.prepareAsync();// player只有调用了onpraparre（）方法后才会调用onstart（）        } catch (IOException e) {            CommonUtil.printError(mContent, e);        } catch (IllegalArgumentException e) {            CommonUtil.printError(mContent, e);        } catch (SecurityException e) {            CommonUtil.printError(mContent, e);        } catch (IllegalStateException e) {            CommonUtil.printError(mContent, e);        }    }    public String getMediaPath() {        return mMediaFilePath;    }    @Override    public void recycleRes() {        try {            if (mediaPlayer != null) {                if (isPlaying) {                    try {                        mediaPlayer.stop();                    } catch (Exception e) {                        CommonUtil.printError(mContent, e);                    }                }                try {                    mediaPlayer.release();                } catch (Exception e) {                    CommonUtil.printError(mContent, e);                }            }            isPlaying = false;            if (mCurrentMessage != null) {                mCurrentMessage.isPlaying = false;            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    public void recycleCallback() {        try {            recycleRes();            mCurrentMessage = null;            mCallbak = null;        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    @Override    public synchronized void toggle() {        try {            if (isPlaying) {                isPlaying = false;                try {                    mPosition = mediaPlayer.getCurrentPosition();                } catch (Exception e) {                    CommonUtil.printError(mContent, e);                }                try {                    mediaPlayer.pause();                } catch (Exception e) {                    CommonUtil.printError(mContent, e);                }                if (mCallbak != null) {                    mCallbak.onPlayPause(mCurrentMessage);                    mCallbak = null;                }                if (mCurrentMessage != null) {                    mCurrentMessage.isPlaying = false;                }            } else {                init();                try {                    startPlayer(mMediaFilePath);                } catch (Exception e) {                    CommonUtil.printError(mContent, e);                }            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    @Override    public synchronized void onCompletion(MediaPlayer mp) {        mPosition = 0;        try {            mp.stop();            isPlaying = false;            if (mCurrentMessage != null) {                mCurrentMessage.isPlaying = false;            }            if (mCallbak != null) {                mCallbak.endAnimation();                mCallbak.onPlayEnd(mCurrentMessage);                mCurrentMessage = null;                mCallbak = null;            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    @Override    public synchronized void onPrepared(MediaPlayer arg0) {        try {            mediaPlayer.start();            isPlaying = true;            if (mCallbak != null) {                mCallbak.onPlayStart(mCurrentMessage);            }            if (mCurrentMessage != null) {                mCurrentMessage.isPlaying = true;            }        } catch (IllegalStateException e) {            CommonUtil.printError(mContent, e);        }    }    private void init() {        try {            mediaPlayer = new MediaPlayer();            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);            mediaPlayer.setOnCompletionListener(this);            mediaPlayer.setOnPreparedListener(this);            mediaPlayer.setOnErrorListener(this);        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }    }    @Override    public synchronized boolean onError(MediaPlayer arg0, int arg1, int arg2) {        try {            arg0.reset();            isPlaying = false;            if (mCurrentMessage != null) {                mCurrentMessage.isPlaying = false;            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }        return true;    }    @Override    public synchronized MessageInfo getPlayAduioMessage() {        try {            if (mCurrentMessage != null) {                return mCurrentMessage;            }        } catch (Exception e) {            CommonUtil.printError(mContent, e);        }        return null;    }}